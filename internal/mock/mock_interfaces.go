// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cisco "github.com/umatare5/wnc/pkg/cisco"
)

// MockWNCClient is a mock of WNCClient interface.
type MockWNCClient struct {
	ctrl     *gomock.Controller
	recorder *MockWNCClientMockRecorder
}

// MockWNCClientMockRecorder is the mock recorder for MockWNCClient.
type MockWNCClientMockRecorder struct {
	mock *MockWNCClient
}

// NewMockWNCClient creates a new mock instance.
func NewMockWNCClient(ctrl *gomock.Controller) *MockWNCClient {
	mock := &MockWNCClient{ctrl: ctrl}
	mock.recorder = &MockWNCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWNCClient) EXPECT() *MockWNCClientMockRecorder {
	return m.recorder
}

// GetApCapwapData mocks base method.
func (m *MockWNCClient) GetApCapwapData(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApCapwapData", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApCapwapData indicates an expected call of GetApCapwapData.
func (mr *MockWNCClientMockRecorder) GetApCapwapData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApCapwapData", reflect.TypeOf((*MockWNCClient)(nil).GetApCapwapData), ctx)
}

// GetApCfg mocks base method.
func (m *MockWNCClient) GetApCfg(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApCfg", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApCfg indicates an expected call of GetApCfg.
func (mr *MockWNCClientMockRecorder) GetApCfg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApCfg", reflect.TypeOf((*MockWNCClient)(nil).GetApCfg), ctx)
}

// GetApGlobalOper mocks base method.
func (m *MockWNCClient) GetApGlobalOper(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApGlobalOper", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApGlobalOper indicates an expected call of GetApGlobalOper.
func (mr *MockWNCClientMockRecorder) GetApGlobalOper(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApGlobalOper", reflect.TypeOf((*MockWNCClient)(nil).GetApGlobalOper), ctx)
}

// GetApLldpNeigh mocks base method.
func (m *MockWNCClient) GetApLldpNeigh(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApLldpNeigh", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApLldpNeigh indicates an expected call of GetApLldpNeigh.
func (mr *MockWNCClientMockRecorder) GetApLldpNeigh(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApLldpNeigh", reflect.TypeOf((*MockWNCClient)(nil).GetApLldpNeigh), ctx)
}

// GetApOper mocks base method.
func (m *MockWNCClient) GetApOper(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApOper", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApOper indicates an expected call of GetApOper.
func (mr *MockWNCClientMockRecorder) GetApOper(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApOper", reflect.TypeOf((*MockWNCClient)(nil).GetApOper), ctx)
}

// GetApOperData mocks base method.
func (m *MockWNCClient) GetApOperData(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApOperData", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApOperData indicates an expected call of GetApOperData.
func (mr *MockWNCClientMockRecorder) GetApOperData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApOperData", reflect.TypeOf((*MockWNCClient)(nil).GetApOperData), ctx)
}

// GetApRadioOperData mocks base method.
func (m *MockWNCClient) GetApRadioOperData(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApRadioOperData", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApRadioOperData indicates an expected call of GetApRadioOperData.
func (mr *MockWNCClientMockRecorder) GetApRadioOperData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApRadioOperData", reflect.TypeOf((*MockWNCClient)(nil).GetApRadioOperData), ctx)
}

// GetClientGlobalOper mocks base method.
func (m *MockWNCClient) GetClientGlobalOper(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientGlobalOper", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientGlobalOper indicates an expected call of GetClientGlobalOper.
func (mr *MockWNCClientMockRecorder) GetClientGlobalOper(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientGlobalOper", reflect.TypeOf((*MockWNCClient)(nil).GetClientGlobalOper), ctx)
}

// GetClientOper mocks base method.
func (m *MockWNCClient) GetClientOper(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientOper", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientOper indicates an expected call of GetClientOper.
func (mr *MockWNCClientMockRecorder) GetClientOper(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientOper", reflect.TypeOf((*MockWNCClient)(nil).GetClientOper), ctx)
}

// GetDot11Cfg mocks base method.
func (m *MockWNCClient) GetDot11Cfg(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDot11Cfg", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDot11Cfg indicates an expected call of GetDot11Cfg.
func (mr *MockWNCClientMockRecorder) GetDot11Cfg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDot11Cfg", reflect.TypeOf((*MockWNCClient)(nil).GetDot11Cfg), ctx)
}

// GetRadioCfg mocks base method.
func (m *MockWNCClient) GetRadioCfg(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRadioCfg", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRadioCfg indicates an expected call of GetRadioCfg.
func (mr *MockWNCClientMockRecorder) GetRadioCfg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadioCfg", reflect.TypeOf((*MockWNCClient)(nil).GetRadioCfg), ctx)
}

// GetRfTags mocks base method.
func (m *MockWNCClient) GetRfTags(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRfTags", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRfTags indicates an expected call of GetRfTags.
func (mr *MockWNCClientMockRecorder) GetRfTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRfTags", reflect.TypeOf((*MockWNCClient)(nil).GetRfTags), ctx)
}

// GetRrmCfg mocks base method.
func (m *MockWNCClient) GetRrmCfg(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRrmCfg", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRrmCfg indicates an expected call of GetRrmCfg.
func (mr *MockWNCClientMockRecorder) GetRrmCfg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRrmCfg", reflect.TypeOf((*MockWNCClient)(nil).GetRrmCfg), ctx)
}

// GetRrmGlobalOper mocks base method.
func (m *MockWNCClient) GetRrmGlobalOper(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRrmGlobalOper", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRrmGlobalOper indicates an expected call of GetRrmGlobalOper.
func (mr *MockWNCClientMockRecorder) GetRrmGlobalOper(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRrmGlobalOper", reflect.TypeOf((*MockWNCClient)(nil).GetRrmGlobalOper), ctx)
}

// GetRrmMeasurement mocks base method.
func (m *MockWNCClient) GetRrmMeasurement(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRrmMeasurement", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRrmMeasurement indicates an expected call of GetRrmMeasurement.
func (mr *MockWNCClientMockRecorder) GetRrmMeasurement(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRrmMeasurement", reflect.TypeOf((*MockWNCClient)(nil).GetRrmMeasurement), ctx)
}

// GetRrmOper mocks base method.
func (m *MockWNCClient) GetRrmOper(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRrmOper", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRrmOper indicates an expected call of GetRrmOper.
func (mr *MockWNCClientMockRecorder) GetRrmOper(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRrmOper", reflect.TypeOf((*MockWNCClient)(nil).GetRrmOper), ctx)
}

// GetWlanCfg mocks base method.
func (m *MockWNCClient) GetWlanCfg(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWlanCfg", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWlanCfg indicates an expected call of GetWlanCfg.
func (mr *MockWNCClientMockRecorder) GetWlanCfg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWlanCfg", reflect.TypeOf((*MockWNCClient)(nil).GetWlanCfg), ctx)
}

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockClientFactory) NewClient(controller, apikey string, isSecure *bool) (cisco.WNCClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", controller, apikey, isSecure)
	ret0, _ := ret[0].(cisco.WNCClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockClientFactoryMockRecorder) NewClient(controller, apikey, isSecure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockClientFactory)(nil).NewClient), controller, apikey, isSecure)
}

// NewClientWithOptions mocks base method.
func (m *MockClientFactory) NewClientWithOptions(controller, apikey string, options ...cisco.ClientOption) (cisco.WNCClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{controller, apikey}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewClientWithOptions", varargs...)
	ret0, _ := ret[0].(cisco.WNCClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientWithOptions indicates an expected call of NewClientWithOptions.
func (mr *MockClientFactoryMockRecorder) NewClientWithOptions(controller, apikey interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{controller, apikey}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientWithOptions", reflect.TypeOf((*MockClientFactory)(nil).NewClientWithOptions), varargs...)
}

// NewClientWithTimeout mocks base method.
func (m *MockClientFactory) NewClientWithTimeout(controller, apikey string, timeout int, isSecure *bool) (cisco.WNCClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientWithTimeout", controller, apikey, timeout, isSecure)
	ret0, _ := ret[0].(cisco.WNCClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientWithTimeout indicates an expected call of NewClientWithTimeout.
func (mr *MockClientFactoryMockRecorder) NewClientWithTimeout(controller, apikey, timeout, isSecure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientWithTimeout", reflect.TypeOf((*MockClientFactory)(nil).NewClientWithTimeout), controller, apikey, timeout, isSecure)
}
